# Copyright 2024 Rostlab.
# SPDX-License-Identifier: Apache-2.0

"""Tests for the GemmiStructureParser adapter."""

import numpy as np
from pathlib import Path

from flatprot.io.structure_gemmi_adapter import GemmiStructureParser
from flatprot.core.structure import Chain, Structure
from flatprot.core.types import ResidueType, SecondaryStructureType
from flatprot.core.coordinates import ResidueRange


# --- Expected Secondary Structure Definitions ---
# Based on manual inspection of tests/data/test.cif and DSSP logic
# Note: Residue indices are 1-based as in PDB/CIF/DSSP
EXPECTED_SS = [
    ResidueRange("A", 1, 1, 0, SecondaryStructureType.COIL),
    ResidueRange("A", 2, 6, 1, SecondaryStructureType.SHEET),
    # ResidueRange("A", 6, 6, 5, SecondaryStructureType.SHEET), # Note: DSSP has 6 as a sheet, but it is merged with 5 due to the algorithm prioritizing longer streches
    ResidueRange("A", 7, 13, 6, SecondaryStructureType.COIL),
    ResidueRange("A", 14, 17, 13, SecondaryStructureType.SHEET),
    ResidueRange("A", 18, 19, 17, SecondaryStructureType.HELIX),  # 3-10 Helix in CIF
    ResidueRange("A", 20, 23, 19, SecondaryStructureType.COIL),
    ResidueRange("A", 24, 30, 23, SecondaryStructureType.SHEET),
    ResidueRange("A", 31, 37, 30, SecondaryStructureType.COIL),
    ResidueRange("A", 38, 44, 37, SecondaryStructureType.SHEET),
    ResidueRange("A", 45, 45, 44, SecondaryStructureType.COIL),
    ResidueRange("A", 46, 54, 45, SecondaryStructureType.HELIX),  # Alpha Helix
    ResidueRange("A", 55, 59, 54, SecondaryStructureType.COIL),
    ResidueRange("A", 60, 65, 59, SecondaryStructureType.SHEET),
    ResidueRange("A", 66, 72, 65, SecondaryStructureType.COIL),
]


class TestGemmiStructureParser:
    """Tests specifically for the GemmiStructureParser implementation."""

    def test_parse_annotated_structure_cif(self) -> None:
        """Test parsing a CIF file with secondary structure annotations within it."""
        parser = GemmiStructureParser()
        test_file = Path("tests/data/test.cif")

        # Test parsing
        structure: Structure = parser.parse_structure(test_file)

        # --- Basic Structure Assertions ---
        assert isinstance(structure, Structure)
        assert list(structure.items())[0][0] == "A"  # Check chain ID
        chain_a = structure["A"]
        assert isinstance(chain_a, Chain)
        assert chain_a.id == "A"

        # --- Residue and Index Assertions ---
        # Residue indices in test.cif for chain A range from 1 to 72
        assert chain_a.num_residues == 72
        assert len(chain_a.residues) == 72
        assert len(chain_a.coordinates) == 72
        assert chain_a.index[0] == 1 and chain_a.index[-1] == 72
        assert chain_a.residues[0] == ResidueType.LEU  # First residue (LEU 1)
        assert (
            chain_a.residues[5] == ResidueType.CYS
        )  # CYS at index 6 (0-based list index 5)
        assert chain_a.residues[71] == ResidueType.ARG  # Last residue (ARG 72)

        # --- Coordinate Assertion ---
        # We need to check the C-alpha coordinate for CYS 6 (atom_serial 45)
        expected_ca_coords_cys6 = np.array([7.396, 0.123, 4.148])
        cys6_coord_obj = chain_a[6]  # Get ResidueCoordinate for residue 6
        cys6_contig_idx = cys6_coord_obj.coordinate_index  # Should be 5
        assert cys6_contig_idx == 5
        actual_ca_coords_cys6 = chain_a.coordinates[cys6_contig_idx]
        np.testing.assert_array_almost_equal(
            actual_ca_coords_cys6, expected_ca_coords_cys6
        )

        # --- Secondary Structure Assertions ---
        # Check the complete list of SS ranges generated by the property
        ss_elements = chain_a.secondary_structure
        assert ss_elements == EXPECTED_SS

    def test_parse_structure_with_dssp(self) -> None:
        """Test parsing a PDB file using an external DSSP file for SS annotation."""
        parser = GemmiStructureParser()
        pdb_file = Path("tests/data/test.pdb")
        dssp_file = Path("tests/data/test.dssp")

        # Test parsing with DSSP
        structure: Structure = parser.parse_structure(pdb_file, dssp_file)

        # --- Basic Structure Assertions ---
        assert isinstance(structure, Structure)
        assert "A" in structure
        chain_a = structure["A"]
        assert isinstance(chain_a, Chain)
        assert chain_a.id == "A"

        # --- Residue and Index Assertions ---
        assert chain_a.num_residues == 72
        assert len(chain_a.residues) == 72
        assert len(chain_a.coordinates) == 72
        assert chain_a.index[0] == 1 and chain_a.index[-1] == 72
        assert chain_a.residues[0] == ResidueType.LEU
        assert chain_a.residues[5] == ResidueType.CYS
        assert chain_a.residues[71] == ResidueType.ARG

        # --- Coordinate Assertion ---
        # CYS 6 CA coordinates from test.pdb (line with atom number 45)
        expected_ca_coords_cys6 = np.array([7.396, 0.123, 4.148])
        cys6_coord_obj = chain_a[6]
        cys6_contig_idx = cys6_coord_obj.coordinate_index  # Should be 5
        assert cys6_contig_idx == 5
        actual_ca_coords_cys6 = chain_a.coordinates[cys6_contig_idx]
        np.testing.assert_array_almost_equal(
            actual_ca_coords_cys6, expected_ca_coords_cys6
        )

        # --- Secondary Structure Assertions (from DSSP) ---
        # Check the complete list of SS ranges generated by the property
        ss_elements = chain_a.secondary_structure
        assert ss_elements == EXPECTED_SS
